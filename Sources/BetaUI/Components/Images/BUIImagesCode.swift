//
//  BUIImagesCode.swift
//  BUIImages
//
//  Created by Szabolcs Toth on 2022. 01. 14..
//  Copyright Â© 2022 BinaryRev. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class BUIImagesCode : NSObject {

    //// Cache

    private struct Cache {
        static let kMainColor1: UIColor = UIColor(red: 0.937, green: 0.498, blue: 0.290, alpha: 1.000)
        static let kMainColor3: UIColor = UIColor(red: 0.988, green: 0.898, blue: 0.859, alpha: 1.000)
        static let kMainColor2: UIColor = UIColor(red: 0.969, green: 0.718, blue: 0.651, alpha: 1.000)
    }

    //// Colors

    @objc dynamic public class var kMainColor1: UIColor { return Cache.kMainColor1 }
    @objc dynamic public class var kMainColor3: UIColor { return Cache.kMainColor3 }
    @objc dynamic public class var kMainColor2: UIColor { return Cache.kMainColor2 }

    //// Drawing Methods

    @objc dynamic public class func drawBUIUserProfileImage(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 26, height: 26), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 26, height: 26), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 26, y: resizedFrame.height / 26)


        //// user-circle
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 3, y: 3, width: 20, height: 20))
        BUIImagesCode.kMainColor3.setFill()
        ovalPath.fill()
        BUIImagesCode.kMainColor1.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 20.33, y: 19.79))
        bezierPath.addCurve(to: CGPoint(x: 13, y: 15), controlPoint1: CGPoint(x: 19.09, y: 16.97), controlPoint2: CGPoint(x: 16.28, y: 15))
        bezierPath.addCurve(to: CGPoint(x: 5.67, y: 19.79), controlPoint1: CGPoint(x: 9.72, y: 15), controlPoint2: CGPoint(x: 6.91, y: 16.97))
        bezierPath.addCurve(to: CGPoint(x: 13, y: 23), controlPoint1: CGPoint(x: 7.5, y: 21.76), controlPoint2: CGPoint(x: 10.1, y: 23))
        bezierPath.addCurve(to: CGPoint(x: 20.33, y: 19.79), controlPoint1: CGPoint(x: 15.9, y: 23), controlPoint2: CGPoint(x: 18.5, y: 21.76))
        bezierPath.close()
        BUIImagesCode.kMainColor2.setFill()
        bezierPath.fill()
        BUIImagesCode.kMainColor1.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.lineCapStyle = .round
        bezierPath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 9, y: 7, width: 8, height: 8))
        BUIImagesCode.kMainColor2.setFill()
        oval2Path.fill()
        BUIImagesCode.kMainColor1.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()
        
        context.restoreGState()

    }




    @objc(BUIImagesCodeResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
